
Parameters:
DATA_PATH=./data/
DATASET=ogbn-products
DROPOUT=0.5
ENABLE_LOOKAHEAD=False
EPOCHS=1000
EVALUATE=None
GPU=0
GRAPH_METADATA_PATH=kernels/w12_nz64_warp_4/
HIDDEN_DIM=256
HIDDEN_LAYERS=3
KERNEL_MODE=auto
MAXK=4
MAXK_FALLBACK_THRESHOLD=0.001
MAXK_NUM_WARPS=12
MAXK_WARP_MAX_NZ=64
MODEL=gcn
NONLINEAR=maxk
NORM=False
PATH=./run/
PLOT_PATH=./run/plots
PROFILE_KERNELS=False
SAVE_MODEL=False
SEED=97
SELFLOOP=False
USE_MAXK_KERNELS=False
VALIDATE_KERNELS=False
W_LR=0.01
W_WEIGHT_DECAY=0

Training with DGL built-in convolution modules
Creating GCN model...
Using standard DGL GCN model
Model parameters: 236,079 total, 236,079 trainable
Graph statistics: 2449029 nodes, 123718280 edges
Average degree: 50.52
Feature dimension: 100, Hidden dimension: 256
MaxK value: 4, Nonlinearity: maxk
Starting training...
âœ… MaxK CUDA kernels loaded for training integration
Current process ID: 33727
Traceback (most recent call last):
  File "/home/labuser/MaxK-GNN/maxk_gnn_integrated.py", line 387, in <module>
    train(g, features, labels, masks, model, config, logger, writer)
  File "/home/labuser/MaxK-GNN/maxk_gnn_integrated.py", line 124, in train
    logits = model(g, features)
  File "/home/labuser/miniconda3/envs/maxkgnn/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/labuser/miniconda3/envs/maxkgnn/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/labuser/MaxK-GNN/maxk_models_integrated.py", line 830, in forward
    x = self.gcnlayers[i](g, x)
  File "/home/labuser/miniconda3/envs/maxkgnn/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/labuser/miniconda3/envs/maxkgnn/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/labuser/miniconda3/envs/maxkgnn/lib/python3.9/site-packages/dgl/nn/pytorch/conv/graphconv.py", line 408, in forward
    raise DGLError(
dgl._ffi.base.DGLError: There are 0-in-degree nodes in the graph, output for those nodes will be invalid. This is harmful for some applications, causing silent performance regression. Adding self-loop on the input graph by calling `g = dgl.add_self_loop(g)` will resolve the issue. Setting ``allow_zero_in_degree`` to be `True` when constructing this module will suppress the check and let the code run.
